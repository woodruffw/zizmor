//! Parser rules for Actions expressions.
//!
//! See: <https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions>

WHITESPACE = _{ " " }

/// A JSON number.
number = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

/// A JSON boolean, i.e. `true` or `false`.
boolean = { "true" | "false" }

/// A JSON `null`.
null = { "null" }

/// An expressions string literal. String literals are always single quoted and use `''` as
/// a quote escape sequence.
string = ${ "'" ~ inner ~ "'" }
inner  = @{ char* }
char   = _{
    !("'") ~ ANY // match anything except a single quote

  | "'" ~ "'" // handle quote escaping explicitly
}

ident = @{ ASCII_ALPHA+ ~ (ASCII_ALPHANUMERIC | "-" | "_")* }

/// A function call.
call = @{ ident ~ "(" ~ WHITESPACE* ~ (expr ~ ("," ~ WHITESPACE* ~ expr)*)? ~ ")" }

/// A *context ref*, e.g. `secrets.FOO_BAR`.
///
/// See: <https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs>
context_ref = @{ ident ~ ("." ~ ident)? }

/// Unary negation.
negation = { "!" ~ expr }

/// Binary comparison.
comparison = { expr ~ (">" | ">=" | "<" | "<=") ~ expr }

/// Binary equality.
equality = { expr ~ "==" ~ expr }

/// Binary logical and.
and = { expr ~ "&&" ~ expr }

/// Binary logical or.
or = { expr ~ "||" ~ expr }

/// An expression.
expr = _{ number | boolean | null | string | call | context_ref }

top = _{ SOI ~ (expr) ~ EOI }
