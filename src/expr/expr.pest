//! Parser rules for Actions expressions.
//!
//! See: <https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions>

/// Whitespace handling
WHITESPACE = _{ " " }

expression = { SOI ~ or_expr ~ EOI }

/// Logical OR
or_expr = { and_expr ~ ("||" ~ and_expr)* }

/// Logical AND
and_expr = { eq_expr ~ ("&&" ~ eq_expr)* }

/// Structural equality/inequality
eq_expr = { comp_expr ~ (eq_op ~ comp_expr)* }
eq_op   = { "==" | "!=" }

/// Structural comparison
comp_expr = { unary_expr ~ (comp_op ~ unary_expr)* }
comp_op   = { ">" | ">=" | "<" | "<=" }

/// Unary operations, including the base case for expressions.
unary_expr = { unary_op? ~ primary_expr }
unary_op   = { "!" }

primary_expr = {
    number
  | string
  | boolean
  | null
  | function_call
  | context_reference
  | "(" ~ primary_expr ~ ")"
}

/// Numbers
number = @{ "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT+)? }

/// Strings
string       = ${ "'" ~ string_inner ~ "'" }
string_inner = @{ string_char* }
string_char  = @{
    !("'") ~ ANY
  | "'" ~ "'"
}

/// Booleans
boolean = { "true" | "false" }

/// Null
null = { "null" }

/// Context references (e.g., github.event.issue.number)
context_reference = @{ identifier ~ ("." ~ identifier)* }
identifier        = @{ (ASCII_ALPHA | "_" | "-") ~ (ASCII_ALPHANUMERIC | "_" | "-")* }

/// Function calls
function_call = { identifier ~ "(" ~ (primary_expr ~ ("," ~ primary_expr)*)? ~ ")" }
