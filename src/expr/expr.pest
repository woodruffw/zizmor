//! Parser rules for Actions expressions.
//!
//! See: <https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/evaluate-expressions-in-workflows-and-actions>

// Whitespace handling
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

/// Main expression rule
expression = { SOI ~ logic_expr ~ EOI }

/// Logical expressions
logic_expr = { comparison_expr ~ (logic_op ~ comparison_expr)* }
logic_op   = { "&&" | "||" }

/// Comparison expressions
comparison_expr = { additive_expr ~ (comparison_op ~ additive_expr)* }
comparison_op   = { "==" | "!=" | ">" | ">=" | "<" | "<=" }

/// Arithmetic expressions
additive_expr = { multiplicative_expr ~ (additive_op ~ multiplicative_expr)* }
additive_op   = { "+" | "-" }

/// Multiplicative expressions
multiplicative_expr = { unary_expr ~ (multiplicative_op ~ unary_expr)* }
multiplicative_op   = { "*" | "/" }

/// Unary expressions
unary_expr = { unary_op? ~ primary_expr }
unary_op   = { "!" | "-" }

/// Primary expressions
primary_expr = {
    number
  | string
  | boolean
  | null
  | function_call
  | context_reference
  | array
  | "(" ~ primary_expr ~ ")"
}

/// Literal values
number  = @{ "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT+)? }
string  = ${ "'" ~ inner ~ "'" }
inner   = @{ char* }
char    = _{
    !("'") ~ ANY // match anything except a single quote

  | "'" ~ "'" // handle quote escaping explicitly
}
boolean =  { "true" | "false" }
null    =  { "null" }

/// Context references (e.g., github.event.issue.number)
context_reference = @{ identifier ~ ("." ~ identifier)* }
identifier        = @{ (ASCII_ALPHA | "_" | "-") ~ (ASCII_ALPHANUMERIC | "_" | "-")* }

/// Arrays
array = { "[" ~ (logic_expr ~ ("," ~ logic_expr)*)? ~ "]" }

/// Function calls
function_call = { identifier ~ "(" ~ (primary_expr ~ ("," ~ primary_expr)*)? ~ ")" }
